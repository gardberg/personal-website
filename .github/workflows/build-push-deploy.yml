name: Build, Push, and Deploy

on:
  push:
    branches:
      - main
      - dev

env:
  REGISTRY: europe-north1-docker.pkg.dev
  IMAGE_NAME: ${{ github.repository }}
  REPO_NAME: ${{ github.event.repository.name }}
  ARTIFACT_NAME: personal-repo
  CLUSTER_LOCATION: europe-north1
  PROD_PROJECT_ID: ${{ vars.GCP_PROJECT_ID_PROD }}
  DEV_PROJECT_ID: ${{ vars.GCP_PROJECT_ID_DEV }}

jobs:
  determine-environment:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
      project_id: ${{ steps.set-env.outputs.project_id }}
    steps:
      - id: set-env
        run: |
          if [[ ${{ github.ref }} == 'refs/heads/main' ]]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
            echo "project_id=${{ env.PROD_PROJECT_ID }}" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
            echo "project_id=${{ env.DEV_PROJECT_ID }}" >> $GITHUB_OUTPUT
          fi

  build-and-push:
    needs: determine-environment
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ needs.determine-environment.outputs.environment == 'prod' && secrets.GCP_SA_KEY || secrets.GCP_SA_KEY_DEV }}
          
      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ needs.determine-environment.outputs.project_id }}
          
      - name: Configure Docker to use the Google Container Registry
        run: |
          gcloud auth configure-docker ${{ env.REGISTRY }}
          
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ needs.determine-environment.outputs.project_id }}/${{ env.ARTIFACT_NAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ needs.determine-environment.outputs.project_id }}/${{ env.ARTIFACT_NAME }}/${{ env.IMAGE_NAME }}:latest

  terraform-deploy:
    needs: [determine-environment, build-and-push]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: terraform
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ needs.determine-environment.outputs.environment == 'prod' && secrets.GCP_SA_KEY || secrets.GCP_SA_KEY_DEV }}
          
      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=${{ needs.determine-environment.outputs.project_id }}-terraform-state" \
            -backend-config="prefix=terraform/state"

      - name: Terraform Validate
        run: terraform validate

        # handle a workflow that fails and leaves the lock
      - name: Remove Terraform Lock (if exists)
        continue-on-error: true
        run: |
          gsutil rm gs://${{ needs.determine-environment.outputs.project_id }}-terraform-state/terraform/state/default.tflock

      - name: Terraform Plan
        run: |
          terraform plan \
            -var-file="environments/${{ needs.determine-environment.outputs.environment }}.tfvars" \
            -var="image_repository=${{ env.REGISTRY }}/${{ needs.determine-environment.outputs.project_id }}/${{ env.ARTIFACT_NAME }}/${{ env.IMAGE_NAME }}" \
            -var="image_tag=latest" \
            -var="project_id=${{ needs.determine-environment.outputs.project_id }}" \
            -out=tfplan
        
      - name: Terraform Apply
        run: terraform apply tfplan
